// <auto-generated />
using System;
using DatabaseAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseAccessLayer.Migrations
{
    [DbContext(typeof(AcademiaHubContext))]
    [Migration("20240909094151_fixKeyIssues")]
    partial class fixKeyIssues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassName = "Class 1"
                        },
                        new
                        {
                            ClassId = 2,
                            ClassName = "Class 2"
                        },
                        new
                        {
                            ClassId = 3,
                            ClassName = "Class 3"
                        },
                        new
                        {
                            ClassId = 4,
                            ClassName = "Class 4"
                        },
                        new
                        {
                            ClassId = 5,
                            ClassName = "Class 5"
                        },
                        new
                        {
                            ClassId = 6,
                            ClassName = "Class 6"
                        },
                        new
                        {
                            ClassId = 7,
                            ClassName = "Class 7"
                        },
                        new
                        {
                            ClassId = 8,
                            ClassName = "Class 8"
                        },
                        new
                        {
                            ClassId = 9,
                            ClassName = "Class 9"
                        },
                        new
                        {
                            ClassId = 10,
                            ClassName = "Class 10"
                        });
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Guardian", b =>
                {
                    b.Property<int>("GuardianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianId"));

                    b.Property<string>("GuardianAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianOCCupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianRelationShip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuardianId");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Hostel", b =>
                {
                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<string>("HostelGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HostelId");

                    b.ToTable("Hostels");

                    b.HasData(
                        new
                        {
                            HostelId = 1,
                            HostelGender = "Male",
                            HostelName = "Hostel 1"
                        },
                        new
                        {
                            HostelId = 2,
                            HostelGender = "Female",
                            HostelName = "Hostel 2"
                        },
                        new
                        {
                            HostelId = 3,
                            HostelGender = "Male",
                            HostelName = "Hostel 3"
                        },
                        new
                        {
                            HostelId = 4,
                            HostelGender = "Female",
                            HostelName = "Hostel 4"
                        },
                        new
                        {
                            HostelId = 5,
                            HostelGender = "Male",
                            HostelName = "Hostel 5"
                        },
                        new
                        {
                            HostelId = 6,
                            HostelGender = "Female",
                            HostelName = "Hostel 6"
                        },
                        new
                        {
                            HostelId = 7,
                            HostelGender = "Male",
                            HostelName = "Hostel 7"
                        },
                        new
                        {
                            HostelId = 8,
                            HostelGender = "Female",
                            HostelName = "Hostel 8"
                        },
                        new
                        {
                            HostelId = 9,
                            HostelGender = "Male",
                            HostelName = "Hostel 9"
                        },
                        new
                        {
                            HostelId = 10,
                            HostelGender = "Female",
                            HostelName = "Hostel 10"
                        });
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Hosteler", b =>
                {
                    b.Property<int>("HostelerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("HostelerId");

                    b.ToTable("Hostelers");
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<string>("FatherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            SectionName = "Section A"
                        },
                        new
                        {
                            SectionId = 2,
                            SectionName = "Section B"
                        },
                        new
                        {
                            SectionId = 3,
                            SectionName = "Section C"
                        },
                        new
                        {
                            SectionId = 4,
                            SectionName = "Section D"
                        },
                        new
                        {
                            SectionId = 5,
                            SectionName = "Section E"
                        },
                        new
                        {
                            SectionId = 6,
                            SectionName = "Section F"
                        },
                        new
                        {
                            SectionId = 7,
                            SectionName = "Section G"
                        },
                        new
                        {
                            SectionId = 8,
                            SectionName = "Section H"
                        },
                        new
                        {
                            SectionId = 9,
                            SectionName = "Section I"
                        },
                        new
                        {
                            SectionId = 10,
                            SectionName = "Section J"
                        });
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Student", b =>
                {
                    b.Property<int>("EnrollmentNo")
                        .HasColumnType("int");

                    b.Property<string>("AadharNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<int>("HostelerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherTongue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnrollmentNo");

                    b.HasIndex("GuardianId");

                    b.HasIndex("HostelerId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DatabaseAccessLayer.Entities.Student", b =>
                {
                    b.HasOne("DatabaseAccessLayer.Entities.Guardian", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAccessLayer.Entities.Hosteler", "Hosteler")
                        .WithMany()
                        .HasForeignKey("HostelerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAccessLayer.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");

                    b.Navigation("Hosteler");

                    b.Navigation("Parent");
                });
#pragma warning restore 612, 618
        }
    }
}
